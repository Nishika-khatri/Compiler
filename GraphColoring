class Graph():
    def __init__(self,vertices):
        self.V = vertices
        self.graph = [[0 for column in range(vertices)]for row in range(vertices)]

    def isSafe(self, v, colour, c):
        for i in range (self.V):
            if self.graph[v][i] == 1 and colour[i] == c:
                return False
        return True

    def graphColourUtil(self, m, colour, v):
        if v == self.V:
            return True
    
        for c in range (1,m+1):
            if self.isSafe(v,colour,c) == True:
                colour[v] = c
                if self.graphColourUtil(m, colour, v+1) == True:
                    return True
                colour[v]=0

    def graphColouring(self,m):
        definedColours = ["red","green","blue","orange","yellow","purple","black","white"]
        colour = [0]*self.V
        if self.graphColourUtil(m,colour,0) == None:
            return False
    
        print("Solution exits and the colours assigned are: ")
        i = 1
        print("Node\tColour")
        for c in colour:
            print("  "+str(i)+"\t  "+definedColours[c-1])
            i+=1
        return True

def main():
    # g = Graph(5)
    g = Graph(3)
    # g.graph = [[0,1,1,0,0],[1,0,1,1,0],[1,1,0,1,0],[0,1,1,0,1],[0,0,0,1,0]]
    g.graph = [[1,1,1],[1,1,1],[1,1,1]]
    m=5
    m=3
    g.graphColouring(m)

main()
