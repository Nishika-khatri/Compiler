class SRParser:
    def __init__(self, CFG, Terminals, NonTerminals, Start):
        self.CFG = CFG
        self.Terminals = Terminals
        self.NonTerminals = NonTerminals
        self.start = Start

    def reduce(self, s, old, new, occurrence):
        li = s.rsplit(old, occurrence)
        return new.join(li)

    def parse(self, string: str, output):

        stack = "$"
        buffer = string + "$"
        headers = ["Stack", "Input Buffer", "Action"]

        outer = []
        action = ""

        # Perform Shift
        with open(output, "w") as out:
            out.write(f"|{headers[0]:^20}|{headers[1]:^20}|{headers[2]:^20}|\n")
            for terminal in self.Terminals:
                if buffer.startswith(terminal):
                    action = f"SHIFT {terminal}"
                    out.write(f"|{stack:20}|{buffer:20}|{action:20}|\n")
                    stack += terminal
                    buffer = buffer[(len(terminal)):]
                    break

            while buffer != "$" or stack != ("$" + self.start):

                # Check if reduce is possible
                reduced = False
                for symbol in self.CFG:
                    for production in self.CFG[symbol]:
                        if stack.endswith(production):
                            reduced = True
                            action = f"REDUCE {symbol}->{production}"
                            out.write(f"|{stack:20}|{buffer:20}|{action:20}|\n")
                            stack = self.reduce(stack, production, symbol, 1)
                            break
                    if reduced:
                        break

                if not reduced and buffer != "$":  # Reduce not possible perform shift
                    for terminal in self.Terminals:
                        if buffer.startswith(terminal):
                            action = f"SHIFT {terminal}"
                            out.write(f"|{stack:20}|{buffer:20}|{action:20}|\n")
                            stack += terminal
                            buffer = buffer[(len(terminal)):]
                            break

                # ERROR CONDITIONS
                elif not reduced and buffer == "$" and stack != ("$" + self.start):  # Niether reduce nor shift possible
                    action = f"ERROR"
                    out.write(f"|{stack:20}|{buffer:20}|{action:20}|\n")
                    break

            if buffer == "$" and stack == ("$" + self.start):
                action = "ACCEPT"
                out.write(f"|{stack:20}|{buffer:20}|{action:20}|\n")


if __name__ == "__main__":
    CFG = {
        "S": ["TL;"],
        "T": ["int ", "float "],
        "L": ["L,id", "id"]
    }
    Terminals = ["int ", "float ", "id", ";", ","]
    NonTerminals = ["S", "T", "L"]
    Start = "S"

    Parser = SRParser(CFG, Terminals, NonTerminals, Start)
    Parser.parse("int id,id;", "parse.txt")
