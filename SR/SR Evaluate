import re


class SRParser:
    def __init__(self, CFG, Terminals, NonTerminals, Start):
        self.CFG = CFG
        self.Terminals = Terminals
        self.NonTerminals = NonTerminals
        self.start = Start

    def reduce(self, s, old, new, occurrence):
        li = s.rsplit(old, occurrence)
        return new.join(li)

    def parse(self, string: str):

        stack = "$"
        buffer = string + "$"

        
        for terminal in self.Terminals:
            if buffer.startswith(terminal):
                stack += terminal
                buffer = buffer[(len(terminal)):]
                break

        while buffer != "$" or stack != ("$" + self.start):

            # Check if reduce is possible
            reduced = False
            for symbol in self.CFG:
                for production in self.CFG[symbol]:
                    if stack.endswith(production):
                        reduced = True
                        stack = self.reduce(stack, production, symbol, 1)
                        break
                if reduced:
                    break

            if not reduced and buffer != "$":  # Reduce not possible perform shift
                for terminal in self.Terminals:
                    if buffer.startswith(terminal):
                        stack += terminal
                        buffer = buffer[(len(terminal)):]
                        break

            # ERROR CONDITIONS
            elif not reduced and buffer == "$" and stack != ("$" + self.start):  # Niether reduce nor shift possible
                return False

        if buffer == "$" and stack == ("$" + self.start):
            return True
            



if __name__ == "__main__":
    CFG = {
        "E" : ["E+E", "E-E", "E/E", "E*E", "id"]
    }

    Terminals = ["+", "-", "/", "*", "id"]
    NonTerminals = ["E"]
    Start = "E"
    String = "3+4"
    newString = String[:]

    nums = re.split("\+|-|/|\*", String)
    for r in nums:
        newString = newString.replace(str(r), "id")


    parser = SRParser(CFG, Terminals, NonTerminals, Start)
    if parser.parse(newString):
        print(f"Evaluated expression ({String}): {eval(String)}")
    else:
        print("String cannot be parsed")
